<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nadia.config.notification.dao.ClientLogMapper">
  <resultMap id="BaseResultMap" type="com.nadia.config.notification.domain.ClientLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="application" jdbcType="VARCHAR" property="application" />
    <result column="group" jdbcType="VARCHAR" property="group" />
    <result column="instance" jdbcType="VARCHAR" property="instance" />
    <result column="trace_id" jdbcType="VARCHAR" property="traceId" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="level" jdbcType="VARCHAR" property="level" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.nadia.config.notification.domain.ClientLog">
    <result column="log" jdbcType="LONGVARCHAR" property="log" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, application, `group`, instance, trace_id, `type`, `level`, created_at, created_by,
    updated_at, updated_by
  </sql>
  <sql id="Blob_Column_List">
    log
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.nadia.config.notification.domain.ClientLogCriteria" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from client_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.nadia.config.notification.domain.ClientLogCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from client_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from client_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from client_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.nadia.config.notification.domain.ClientLogCriteria">
    delete from client_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nadia.config.notification.domain.ClientLog">
    insert into client_log (id, application, `group`, 
      instance, trace_id, `type`,
      `level`, created_at, created_by,
      updated_at, updated_by, log
      )
    values (#{id,jdbcType=BIGINT}, #{application,jdbcType=VARCHAR}, #{group,jdbcType=VARCHAR},
      #{instance,jdbcType=VARCHAR}, #{traceId,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{level,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{createdBy,jdbcType=VARCHAR}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=VARCHAR}, #{log,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nadia.config.notification.domain.ClientLog">
    insert into client_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="application != null">
        application,
      </if>
      <if test="group != null">
        `group`,
      </if>
      <if test="instance != null">
        instance,
      </if>
      <if test="traceId != null">
        trace_id,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="level != null">
        `level`,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="log != null">
        log,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="application != null">
        #{application,jdbcType=VARCHAR},
      </if>
      <if test="group != null">
        #{group,jdbcType=VARCHAR},
      </if>
      <if test="instance != null">
        #{instance,jdbcType=VARCHAR},
      </if>
      <if test="traceId != null">
        #{traceId,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="log != null">
        #{log,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nadia.config.notification.domain.ClientLogCriteria" resultType="java.lang.Long">
    select count(*) from client_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update client_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.application != null">
        application = #{record.application,jdbcType=VARCHAR},
      </if>
      <if test="record.group != null">
        `group` = #{record.group,jdbcType=VARCHAR},
      </if>
      <if test="record.instance != null">
        instance = #{record.instance,jdbcType=VARCHAR},
      </if>
      <if test="record.traceId != null">
        trace_id = #{record.traceId,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null">
        `level` = #{record.level,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="record.log != null">
        log = #{record.log,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update client_log
    set id = #{record.id,jdbcType=BIGINT},
      application = #{record.application,jdbcType=VARCHAR},
      `group` = #{record.group,jdbcType=VARCHAR},
      instance = #{record.instance,jdbcType=VARCHAR},
      trace_id = #{record.traceId,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      `level` = #{record.level,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      created_by = #{record.createdBy,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      log = #{record.log,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update client_log
    set id = #{record.id,jdbcType=BIGINT},
      application = #{record.application,jdbcType=VARCHAR},
      `group` = #{record.group,jdbcType=VARCHAR},
      instance = #{record.instance,jdbcType=VARCHAR},
      trace_id = #{record.traceId,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      `level` = #{record.level,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      created_by = #{record.createdBy,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      updated_by = #{record.updatedBy,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nadia.config.notification.domain.ClientLog">
    update client_log
    <set>
      <if test="application != null">
        application = #{application,jdbcType=VARCHAR},
      </if>
      <if test="group != null">
        `group` = #{group,jdbcType=VARCHAR},
      </if>
      <if test="instance != null">
        instance = #{instance,jdbcType=VARCHAR},
      </if>
      <if test="traceId != null">
        trace_id = #{traceId,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        `level` = #{level,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="log != null">
        log = #{log,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.nadia.config.notification.domain.ClientLog">
    update client_log
    set application = #{application,jdbcType=VARCHAR},
      `group` = #{group,jdbcType=VARCHAR},
      instance = #{instance,jdbcType=VARCHAR},
      trace_id = #{traceId,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      `level` = #{level,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      created_by = #{createdBy,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=VARCHAR},
      log = #{log,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nadia.config.notification.domain.ClientLog">
    update client_log
    set application = #{application,jdbcType=VARCHAR},
      `group` = #{group,jdbcType=VARCHAR},
      instance = #{instance,jdbcType=VARCHAR},
      trace_id = #{traceId,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      `level` = #{level,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      created_by = #{createdBy,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>